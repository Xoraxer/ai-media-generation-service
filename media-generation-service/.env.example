# ====================================
# Media Generation Service - Backend
# Environment Configuration Template
# ====================================

# Copy this file to .env and fill in your actual values
# cp .env.example .env

# ====== DATABASE CONFIGURATION ======
# PostgreSQL Database URL for async operations (FastAPI)
# Format: postgresql+asyncpg://username:password@host:port/database
DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/media_generation

# For Docker development, use the service name:
# DATABASE_URL=postgresql+asyncpg://user:password@db:5432/media_generation

# ====== REDIS CONFIGURATION ======
# Redis URL for Celery job queue and caching
REDIS_URL=redis://localhost:6379/0

# For Docker development, use the service name:
# REDIS_URL=redis://redis:6379/0

# ====== REPLICATE API CONFIGURATION ======
# REQUIRED: Get your API token from https://replicate.com/account/api-tokens
# This is needed to generate images using AI models
REPLICATE_API_TOKEN=your_replicate_token_here

# ====== APPLICATION SETTINGS ======
# Enable debug mode (set to False in production)
DEBUG=True

# Application name (used in logs and API documentation)
PROJECT_NAME=Media Generation Service

# API version prefix (used for all endpoints)
API_V1_PREFIX=/api/v1

# ====== FILE STORAGE CONFIGURATION ======
# Local directory for storing generated images
# Make sure this directory exists and is writable
STORAGE_PATH=./storage

# ====== CELERY TASK CONFIGURATION ======
# Maximum number of retry attempts for failed jobs
MAX_RETRIES=3

# Base multiplier for exponential backoff retry delays
# Retry delay = RETRY_BACKOFF_BASE ^ retry_attempt * 60 seconds
RETRY_BACKOFF_BASE=2.0

# ====== CORS CONFIGURATION ======
# Allowed origins for CORS (comma-separated)
# Add your frontend URL here
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000

# ====== PRODUCTION SETTINGS ======
# For production deployment, consider these additional settings:

# Set DEBUG to False
# DEBUG=False

# Use production database URL
# DATABASE_URL=postgresql+asyncpg://prod_user:secure_password@prod_host:5432/prod_db

# Use production Redis URL  
# REDIS_URL=redis://prod_redis_host:6379/0

# Set secure CORS origins
# ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

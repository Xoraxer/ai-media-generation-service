services:
  # Local PostgreSQL (for development only - you'll use Render in production)
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: media_generation
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d media_generation"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # FastAPI Web Application
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/media_generation
      - REDIS_URL=redis://redis:6379/0
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN:-your_replicate_token_here}
      - DEBUG=true
      - PROJECT_NAME=Media Generation Service
      - API_V1_PREFIX=/api/v1
      - STORAGE_PATH=./storage
      - MAX_RETRIES=3
      - RETRY_BACKOFF_BASE=2.0
    volumes:
      - .:/app
      - image_storage:/app/storage/generated
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Celery Worker for Background Tasks
  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/media_generation
      - REDIS_URL=redis://redis:6379/0
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN}
      - DEBUG=true
      - MAX_RETRIES=3
      - RETRY_BACKOFF_BASE=2.0
    volumes:
      - .:/app
      - image_storage:/app/storage/generated
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    restart: unless-stopped
    command: celery -A worker.celery_app worker --loglevel=info --queues=media_generation,default

  # React Frontend Application
  frontend:
    build: 
      context: ../media-generation-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  image_storage: 